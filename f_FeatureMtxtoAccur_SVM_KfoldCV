function [KFOLD_Accuracy] = f_FeatureMtxtoAccur_SVM_KfoldCV ...
    (featureMatrix,labels, SVM_options, KFOLD, shufflingTimes)
%This function performs a k-fold cross validation on the input
%dataset and returns the accuracy using SVM (chosen type).
%Inputs:
%   featureMatrix: a M-by-N matrix, where M is the number of samples and N
%   is the number of features.
%   labels: a M-by-1 vector, with the labels of the M samples.
%   SVM_options: the vector of SVM options with the minimum length of 1 and
%   maximum length of 5:
%       SVM_options (length=1) : [kernel_type]:
%         [0] -- linear: u'*v
%         [1] -- polynomial: (gamma*u'*v + coef0)^degree
%         [2] -- radial basis function: exp(-gamma*|u-v|^2)
%         [3] -- sigmoid: tanh(gamma*u'*v + coef0)
%       SVM_options (length=2): [kernel_type=0,1,2 or 3, slack_var]
%       SVM_options (length=3): [kernel_type=2, slack_var, gamma)
%       SVM_options (length=4): [kernel_type=3, slack_var, gamma, coef0)
%       SVM_options (length=5): [kernel_type=1, slack_var, gamma, coef0,...
%           degree)
%       Default values for SVM_options (if they are not determined by the
%       user): degree = 3, gamma = 1/num_features, coef0 = 0, slack_var = 1
%   KFOLD: number of folds in the k-fold cross validation
%   shufflingTimes: number of shuffling times. In the k-fold cross
%   validation, it is necessary to do multiple runs of fold assignment and
%   average the accuracy across these runs (to avoid possibly too good or
%   too bad fold assignments)
switch exist('LIBSVM','dir') %check if LIBSVM exists
    case 0
        error('LIBSVM cannot be added to the path');
    case 7
        addpath(genpath('LIBSVM')) % download the LIBSVM library from:
        % https://www.csie.ntu.edu.tw/~cjlin/libsvm/ and save it in the 
        % working directory (or anywhere else, you just need to change the 
        % address here)
end
numvarargs = length(SVM_options);
switch numvarargs
    case 1
        svmoptions = sprintf('-t %d -q 1', SVM_options);
    case 2
        svmoptions = sprintf('-t %d -q 1 -c %d', SVM_options(1), ...
            SVM_options(2));
    case 3
        if SVM_options(1) ~= 2
            error('mismatch between the kernel type and number of inputs');
        else
            svmoptions = sprintf('-t %d -q 1 -c %d -g %d', ...
                SVM_options(1), SVM_options(2), SVM_options(3));
        end
    case 4
        if SVM_options(1) ~= 3
            error('mismatch between the kernel type and number of inputs');
        else
            svmoptions = sprintf('-t %d -q 1 -c %d -g %d -r %d', ...
                SVM_options(1), SVM_options(2), SVM_options(3), ...
                SVM_options(4));
        end
    case 5
        if SVM_options(1) ~= 1
            error('mismatch between the kernel type and number of inputs');
        else
            svmoptions = sprintf('-t %d -q 1 -c %d -g %d -r %d -d %d', ...
                SVM_options(1), SVM_options(2), SVM_options(3), ...
                SVM_options(4), SVM_options(5));
        end
end
accur_shuffles=zeros(1 ,shufflingTimes); % accuracy of each run of k-fold
% cross validation (new shuffle of folds each time)
for shufflingStep=1:shufflingTimes % looping through all runs of k-fold CV
    indices = crossvalind('Kfold',labels,KFOLD); %fold assignments
    accur_folds=zeros(1 ,KFOLD);
    for i= 1:KFOLD %looping through the folds
        test = (indices == i); % setting labels for the training set
        train = ~test; % setting labels for the test set
        class_SVM = svmtrain(labels(train,:), featureMatrix(train,:), ...
            svmoptions);
        [~, Accur, ~]= svmpredict(labels(test,:), featureMatrix(test,:),...
            class_SVM);
        accur_folds(1,i) = Accur(1);% calculating the accuracy of the
        % current fold.
    end
    accur_shuffles(:,shufflingStep)=sum(accur_folds,2)/KFOLD;% calculating
    % the accuracy of the current run (shuffle).
end
KFOLD_Accuracy=sum(accur_shuffles,2)/shufflingTimes; %the average accuracy
% across #shufflingTimes run of K-fold cross validation.
